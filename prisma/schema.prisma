generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  // provider = "postgres"
  // url      = env("DATABASE_URL")
}

model DeployConfig {
  l1ChainId Int
  l2ChainId Int

  @@id([l1ChainId, l2ChainId])
}

model Block {
  number       BigInt        @id
  hash         String        @unique
  timestamp    BigInt
  gasUsed      String
  gasLimit     String
  extraData    String
  parentHash   String
  transactions Transaction[]
}

model Transaction {
  hash                 String              @id
  blockNumber          BigInt
  from                 String
  to                   String?
  value                String
  gas                  String
  gasPrice             String?
  maxFeePerGas         String?
  maxPriorityFeePerGas String?
  type                 String
  typeHex              String
  nonce                Int
  transactionIndex     Int
  input                String
  timestamp            BigInt
  block                Block               @relation(fields: [blockNumber], references: [number])
  receipt              TransactionReceipt?
  logs                 Log[]
  erc20Transfers       Erc20Transfer[]
  nftTransfers         NftTransfer[]
  accounts             Account[]
}

model TransactionReceipt {
  transactionHash   String          @id
  status            Boolean
  from              String
  to                String?
  effectiveGasPrice String?
  gasUsed           String
  l1Fee             String?
  l1GasPrice        String?
  l1GasUsed         String?
  l1FeeScalar       Int?
  transaction       Transaction     @relation(fields: [transactionHash], references: [hash])
  logs              Log[]
  erc20Transfers    Erc20Transfer[]
  nftTransfers      NftTransfer[]
}

model Log {
  blockNumber      BigInt
  transactionIndex Int
  logIndex         Int
  address          String
  blockHash        String
  data             String
  transactionHash  String
  removed          Boolean
  topics           String
  transaction      Transaction        @relation(fields: [transactionHash], references: [hash])
  receipt          TransactionReceipt @relation(fields: [transactionHash], references: [transactionHash])
  erc20Transfer    Erc20Transfer?
  nftTransfer      NftTransfer?

  @@id([blockNumber, transactionIndex, logIndex])
}

model Account {
  address         String        @id
  bytecode        String?
  transactionHash String?
  contract        String?
  transaction     Transaction?  @relation(fields: [transactionHash], references: [hash])
  erc20Token      Erc20Token?
  erc721Token     Erc721Token?
  erc1155Token    Erc1155Token?
}

model Erc20Token {
  address   String          @id
  name      String
  symbol    String
  decimals  Int
  account   Account         @relation(fields: [address], references: [address])
  transfers Erc20Transfer[]
}

model Erc20Transfer {
  blockNumber      BigInt
  transactionIndex Int
  logIndex         Int
  transactionHash  String
  address          String
  from             String
  to               String
  value            String
  token            Erc20Token         @relation(fields: [address], references: [address])
  transaction      Transaction        @relation(fields: [transactionHash], references: [hash])
  receipt          TransactionReceipt @relation(fields: [transactionHash], references: [transactionHash])
  log              Log                @relation(fields: [blockNumber, transactionIndex, logIndex], references: [blockNumber, transactionIndex, logIndex])

  @@id([blockNumber, transactionIndex, logIndex])
}

model Erc721Token {
  address   String        @id
  name      String
  symbol    String
  account   Account       @relation(fields: [address], references: [address])
  transfers NftTransfer[]
}

model Erc1155Token {
  address   String        @id
  account   Account       @relation(fields: [address], references: [address])
  transfers NftTransfer[]
}

model NftTransfer {
  blockNumber         BigInt
  transactionIndex    Int
  logIndex            Int
  transactionHash     String
  address             String
  operator            String?
  from                String
  to                  String
  tokenId             String
  value               String
  erc721TokenAddress  String?
  erc1155TokenAddress String?
  erc721Token         Erc721Token?       @relation(fields: [erc721TokenAddress], references: [address])
  erc1155Token        Erc1155Token?      @relation(fields: [erc1155TokenAddress], references: [address])
  transaction         Transaction        @relation(fields: [transactionHash], references: [hash])
  receipt             TransactionReceipt @relation(fields: [transactionHash], references: [transactionHash])
  log                 Log                @relation(fields: [blockNumber, transactionIndex, logIndex], references: [blockNumber, transactionIndex, logIndex])

  @@id([blockNumber, transactionIndex, logIndex])
}

model TransactionEnqueued {
  l1BlockNumber BigInt
  l2TxHash      String
  timestamp     BigInt
  l1TxHash      String
  l1TxOrigin    String
  gasLimit      String

  @@id([l1BlockNumber, l2TxHash])
}
