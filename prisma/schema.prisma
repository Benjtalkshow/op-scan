generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  // provider = "sqlite"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RollupConfig {
  l2ChainId                Int                   @id
  l2ChainName              String
  l2ChainRpcUrl            String
  l2ChainBlockExplorerName String
  l2ChainBlockExplorerUrl  String
  l2BlockTime              Int
  l1ChainId                Int
  blocks                   Block[]
  transactions             Transaction[]
  logs                     Log[]
  accounts                 Account[]
  receipts                 TransactionReceipt[]
  erc20Transfers           Erc20Transfer[]
  nftTransfers             NftTransfer[]
  erc20Tokens              Erc20Token[]
  erc721Tokens             Erc721Token[]
  erc1155Tokens            Erc1155Token[]
  transactionsHistory      TransactionsHistory[]
  transactionsEnqueued     TransactionEnqueued[]
  l1Blocks                 L1Block[]
}

model Block {
  number            BigInt
  hash              String
  timestamp         BigInt
  gasUsed           String
  gasLimit          String
  extraData         String
  parentHash        String
  transactionsCount Int
  chainId           Int
  transactions      Transaction[]
  rollupConfig      RollupConfig  @relation(fields: [chainId], references: [l2ChainId], onDelete: Cascade)

  @@id([number, chainId])
}

model Transaction {
  hash                 String
  blockNumber          BigInt
  from                 String
  to                   String?
  value                String
  gas                  String
  gasPrice             String?
  maxFeePerGas         String?
  maxPriorityFeePerGas String?
  type                 String
  typeHex              String
  nonce                Int
  transactionIndex     Int
  input                String
  timestamp            BigInt
  chainId              Int
  block                Block               @relation(fields: [blockNumber, chainId], references: [number, chainId], onDelete: Cascade)
  receipt              TransactionReceipt?
  accounts             Account[]
  rollupConfig         RollupConfig        @relation(fields: [chainId], references: [l2ChainId], onDelete: Cascade)

  @@id([hash, chainId])
}

model TransactionReceipt {
  transactionHash   String
  status            Boolean
  from              String
  to                String?
  effectiveGasPrice String?
  gasUsed           String
  l1Fee             String?
  l1GasPrice        String?
  l1GasUsed         String?
  l1FeeScalar       Int?
  chainId           Int
  transaction       Transaction     @relation(fields: [transactionHash, chainId], references: [hash, chainId], onDelete: Cascade)
  logs              Log[]
  erc20Transfers    Erc20Transfer[]
  nftTransfers      NftTransfer[]
  rollupConfig      RollupConfig    @relation(fields: [chainId], references: [l2ChainId], onDelete: Cascade)

  @@id([transactionHash, chainId])
}

model Log {
  blockNumber      BigInt
  transactionIndex Int
  logIndex         Int
  address          String
  blockHash        String
  data             String
  transactionHash  String
  removed          Boolean
  topics           String
  chainId          Int
  receipt          TransactionReceipt @relation(fields: [transactionHash, chainId], references: [transactionHash, chainId], onDelete: Cascade)
  erc20Transfer    Erc20Transfer?
  nftTransfer      NftTransfer?
  rollupConfig     RollupConfig       @relation(fields: [chainId], references: [l2ChainId], onDelete: Cascade)

  @@id([blockNumber, transactionIndex, logIndex, chainId])
}

model Account {
  address         String
  bytecode        String?
  transactionHash String?
  contract        String?
  chainId         Int
  transaction     Transaction?  @relation(fields: [transactionHash, chainId], references: [hash, chainId], onDelete: Cascade)
  erc20Token      Erc20Token?
  erc721Token     Erc721Token?
  erc1155Token    Erc1155Token?
  rollupConfig    RollupConfig  @relation(fields: [chainId], references: [l2ChainId], onDelete: Cascade)

  @@id([address, chainId])
}

model Erc20Token {
  address      String
  name         String
  symbol       String
  decimals     Int
  chainId      Int
  account      Account         @relation(fields: [address, chainId], references: [address, chainId], onDelete: Cascade)
  transfers    Erc20Transfer[]
  rollupConfig RollupConfig    @relation(fields: [chainId], references: [l2ChainId], onDelete: Cascade)

  @@id([address, chainId])
}

model Erc20Transfer {
  blockNumber      BigInt
  transactionIndex Int
  logIndex         Int
  transactionHash  String
  address          String
  from             String
  to               String
  value            String
  destination      Int?
  source           Int?
  chainId          Int
  token            Erc20Token         @relation(fields: [address, chainId], references: [address, chainId], onDelete: Cascade)
  receipt          TransactionReceipt @relation(fields: [transactionHash, chainId], references: [transactionHash, chainId], onDelete: Cascade)
  log              Log                @relation(fields: [blockNumber, transactionIndex, logIndex, chainId], references: [blockNumber, transactionIndex, logIndex, chainId], onDelete: Cascade)
  rollupConfig     RollupConfig       @relation(fields: [chainId], references: [l2ChainId], onDelete: Cascade)

  @@id([blockNumber, transactionIndex, logIndex, chainId])
}

model Erc721Token {
  address      String
  name         String
  symbol       String
  chainId      Int
  account      Account       @relation(fields: [address, chainId], references: [address, chainId], onDelete: Cascade)
  transfers    NftTransfer[]
  rollupConfig RollupConfig  @relation(fields: [chainId], references: [l2ChainId], onDelete: Cascade)

  @@id([address, chainId])
}

model Erc1155Token {
  address      String
  chainId      Int
  account      Account       @relation(fields: [address, chainId], references: [address, chainId], onDelete: Cascade)
  transfers    NftTransfer[]
  rollupConfig RollupConfig  @relation(fields: [chainId], references: [l2ChainId], onDelete: Cascade)

  @@id([address, chainId])
}

model NftTransfer {
  blockNumber         BigInt
  transactionIndex    Int
  logIndex            Int
  transactionHash     String
  address             String
  operator            String?
  from                String
  to                  String
  tokenId             String
  value               String
  erc721TokenAddress  String?
  erc1155TokenAddress String?
  chainId             Int
  erc721Token         Erc721Token?       @relation(fields: [erc721TokenAddress, chainId], references: [address, chainId], onDelete: Cascade)
  erc1155Token        Erc1155Token?      @relation(fields: [erc1155TokenAddress, chainId], references: [address, chainId], onDelete: Cascade)
  receipt             TransactionReceipt @relation(fields: [transactionHash, chainId], references: [transactionHash, chainId], onDelete: Cascade)
  log                 Log                @relation(fields: [blockNumber, transactionIndex, logIndex, chainId], references: [blockNumber, transactionIndex, logIndex, chainId], onDelete: Cascade)
  rollupConfig        RollupConfig       @relation(fields: [chainId], references: [l2ChainId], onDelete: Cascade)

  @@id([blockNumber, transactionIndex, logIndex, chainId])
}

model L1Block {
  number              BigInt
  timestamp           BigInt
  chainId             Int
  rollupConfig        RollupConfig          @relation(fields: [chainId], references: [l2ChainId], onDelete: Cascade)
  transactionEnqueued TransactionEnqueued[]

  @@id([number, chainId])
}

model TransactionEnqueued {
  l1BlockNumber BigInt
  l2TxHash      String
  timestamp     BigInt
  l1TxHash      String
  l1TxOrigin    String
  gasLimit      String
  chainId       Int
  l1Block       L1Block      @relation(fields: [l1BlockNumber, chainId], references: [number, chainId], onDelete: Cascade)
  rollupConfig  RollupConfig @relation(fields: [chainId], references: [l2ChainId], onDelete: Cascade)

  @@id([l1BlockNumber, chainId])
}

model Signature {
  signature String   @id
  hash      String
  createdAt DateTime @default(now())
}

model TransactionsHistory {
  date         DateTime
  price        Float
  transactions Int
  chainId      Int
  rollupConfig RollupConfig @relation(fields: [chainId], references: [l2ChainId], onDelete: Cascade)

  @@id([date, chainId])
}
