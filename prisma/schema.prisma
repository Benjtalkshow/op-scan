generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
//  provider = "sqlite"
//  url      = env("DATABASE_URL")
 provider = "postgres"
 url      = env("DATABASE_URL")
}

model DeployConfig {
  l1ChainId Int
  l2ChainId Int

  @@id([l1ChainId, l2ChainId])
}

model Block {
  number       BigInt        @id
  hash         String        @unique
  timestamp    BigInt
  gasUsed      String
  gasLimit     String
  extraData    String
  parentHash   String
  transactions Transaction[]
}

model Transaction {
  hash                 String              @id
  blockNumber          BigInt
  from                 String
  to                   String?
  value                String
  gas                  String
  gasPrice             String?
  maxFeePerGas         String?
  maxPriorityFeePerGas String?
  type                 String
  typeHex              String
  nonce                Int
  transactionIndex     Int
  input                String
  timestamp            BigInt
  block                Block               @relation(fields: [blockNumber], references: [number])
  receipt              TransactionReceipt?
}

model TransactionReceipt {
  transactionHash   String            @id
  status            Boolean
  from              String
  to                String?
  effectiveGasPrice String?
  gasUsed           String
  l1Fee             String?
  l1GasPrice        String?
  l1GasUsed         String?
  l1FeeScalar       Int?
  logs              Log[]
  erc20Transfers    erc20Transfer[]
  transaction       Transaction       @relation(fields: [transactionHash], references: [hash])
  erc721Transfer    erc721Transfer[]
  erc1155Transfer   erc1155Transfer[]
}

model Log {
  address          String
  blockNumber      BigInt
  blockHash        String
  data             String
  logIndex         Int
  transactionHash  String
  transactionIndex Int
  removed          Boolean
  topics           String
  receipt          TransactionReceipt @relation(fields: [transactionHash], references: [transactionHash])

  @@id([transactionHash, logIndex])
}

model Address {
  address    String  @id
  isContract Boolean
}

model erc20Transfer {
  transactionHash String
  logIndex        Int
  address         String
  from            String
  to              String
  value           String
  decimals        Int
  receipt         TransactionReceipt @relation(fields: [transactionHash], references: [transactionHash])

  @@id([transactionHash, logIndex])
}

model erc721Transfer {
  transactionHash String
  logIndex        Int
  address         String
  from            String
  to              String
  tokenId         String
  receipt         TransactionReceipt @relation(fields: [transactionHash], references: [transactionHash])

  @@id([transactionHash, logIndex])
}

model erc1155Transfer {
  transactionHash String
  logIndex        Int
  address         String
  operator        String
  from            String
  to              String
  id              String
  value           String
  receipt         TransactionReceipt @relation(fields: [transactionHash], references: [transactionHash])

  @@id([transactionHash, logIndex])
}

model TransactionEnqueued {
  l1BlockNumber BigInt
  l2TxHash      String
  timestamp     BigInt
  l1TxHash      String
  l1TxOrigin    String
  gasLimit      String

  @@id([l1BlockNumber, l2TxHash])
}
